"""
Django settings for social_distance project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from dotenv import load_dotenv
from pathlib import Path
import json
import dj_database_url
import os

# load what's in .env to environment vars, accessible via os.getenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOGIN_URL = "/login/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', None)

if SECRET_KEY is None:
    raise Exception("Please set SECRET_KEY=<a secret key> in environment variable.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = [
    'social-distance-api.herokuapp.com',
    '.herokuapp.com',
    '127.0.0.1',
    'localhost',
]
# append more ip address that's set in dotenv
# in .env:
# EXTRA_ALLOWED_HOST=["0.0.0.0", "localhost", "whatever_domain"]
if os.getenv('EXTRA_ALLOWED_HOST'):
    extra_allowed_hosts = os.getenv('EXTRA_ALLOWED_HOST', "")
    ALLOWED_HOSTS = [*ALLOWED_HOSTS, *json.loads(extra_allowed_hosts)]

# allowed origins for CORS
CORS_ALLOWED_ORIGINS = [
    'https://social-distance-web.herokuapp.com',
    'http://localhost:8080',
    'http://127.0.0.1:8080',
]
# EXTRA_ALLOWED_HOST=["0.0.0.0", "localhost", "whatever_domain"]
if os.getenv('EXTRA_ALLOWED_ORIGINS'):
    extra_allowed_origins = os.getenv('EXTRA_ALLOWED_ORIGINS', "")
    CORS_ALLOWED_ORIGINS = [*CORS_ALLOWED_ORIGINS, *json.loads(extra_allowed_origins)]
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True # allow all clients

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'authors',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # we don't use django built-in session, which imposes csrf
    ]
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware', # we don't need csrf as we do CORS anyways
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'social_distance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social_distance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {}
# use DATABASE_URL in env var, and if it's not set, use the default sqlite3
DATABASES['default'] = dj_database_url.config(default='sqlite:///db.sqlite3', conn_max_age=600)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = Path.joinpath(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
